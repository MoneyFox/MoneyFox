pr:
  branches:
    include:
      - master

jobs:

  - job: BuildAndTestWinUI
    displayName: "Build WinUI and Run Tests"
    pool:
      vmImage: windows-2022

    variables:
      solution: '**/*.wapproj'
      appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

    steps:

      - task: UseDotNet@2
        displayName: Use .NET 6.0
        inputs:
          packageType: 'sdk'
          version: '6.0.x'

      - task: DownloadSecureFile@1
        displayName: 'Download Windows Certificate'
        name: 'signingCert'
        inputs:
          secureFile: 'MoneyFoxCert_2021.pfx'

      - powershell: |
          $pfxpath = '$(signingCert.secureFilePath)'
          $certPassword = $env:CERT_PASSWORD_ENV

          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $certPassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
          $store.Add($cert)
          $store.Close()
        displayName: 'Install Cert'
        env:
          CERT_PASSWORD_ENV: $(UWP_Certificate_Password)

      - task: PowerShell@2
        displayName: "Set AppManifest"
        inputs:
          targetType: 'inline'
          script: |
            [xml]$xmlDoc = Get-Content '$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.appxmanifest'
            $xmlDoc.Package.Identity.Name="57598ApplySolutionsSoftwa.MoneyFox"
            $xmlDoc.Package.Identity.Publisher="CN=071307B1-B0E3-434A-AD0E-FFF714A7245C"
            $xmlDoc.Save('$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.appxmanifest')
          failOnStderr: true

      - task: PowerShell@2
        displayName: "Set Store Association"
        inputs:
          targetType: 'inline'
          script: |
            [xml]$xmlDoc = Get-Content '$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.StoreAssociation.xml'
            $xmlDoc.StoreAssociation.Publisher="CN=071307B1-B0E3-434A-AD0E-FFF714A7245C"
            $xmlDoc.StoreAssociation.ProductReservedInfo.MainPackageIdentityName="57598ApplySolutionsSoftwa.MoneyFox"
            $xmlDoc.Save('$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.StoreAssociation.xml')
          failOnStderr: true

      - task: DotNetCoreCLI@2
        displayName: Restore NuGets
        inputs:
          command: 'restore'
          projects: |
            **/*.wapproj
            **/MoneyFox.Win.csproj
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: 'test'
          projects: |
            **/MoneyFox.Core.Tests.csproj
            **/MoneyFox.Infrastructure.Tests.csproj
          arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'

      - task: VSBuild@1
        displayName: 'Build WinUI Project'
        inputs:
          solution: '$(solution)'
          msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|arm64" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=CI'
          platform: x64
          configuration: '$(BuildConfiguration)'
