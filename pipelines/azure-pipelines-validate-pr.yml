pr:
  branches:
    include:
      - master

jobs:

  - job: BuildiOS
    displayName: "Run Tests MacOS and Build iOS"
    pool:
      vmImage: 'macOS-11'
    
    variables:
      solution: '**/MoneyFox.Mobile.sln'
    
    steps:
      #- script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 6_12_0
      #  displayName: 'Select the Xamarin SDK version 6.12.0'
      
      #- script: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_12.2.app;sudo xcode-select --switch /Applications/Xcode_12.2.app/Contents/Developer
      #  displayName: 'Updating xcode version'

      - task: InstallAppleCertificate@2
        displayName: 'Install an Apple certificate'
        inputs:
          certSecureFile: 'Apple Distribution MoneyFox 2021.p12'
          certPwd: '$(P12password)'
          keychain: 'temp'

      - task: InstallAppleProvisioningProfile@1
        displayName: 'Install an Apple provisioning profile'
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'MoneyFox_Distribution_2021.mobileprovision'

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        inputs:
          versionSpec: 6.x

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solution)'

      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: 'test'
          projects: |
            **/*.Tests.csproj
          arguments: '--configuration $(BuildConfiguration)'

      - task: XamariniOS@2
        displayName: 'Build Xamarin.iOS '
        inputs:
          solutionFile: Src/MoneyFox.Ios/MoneyFox.iOS.csproj
          configuration: '$(BuildConfiguration)'
          signingIdentity: $(APPLE_CERTIFICATE_SIGNING_IDENTITY)
          signingProvisioningProfileID: $(APPLE_PROV_PROFILE_UUID)


  - job: BuildAndroid
    displayName: "Build Android"
    pool:
      vmImage: windows-2022
    
    variables:
      solution: '**/MoneyFox.Mobile.sln'
    
    steps:
      - task: pjcollins.azp-utilities-boots.boots.Boots@1
        displayName: 'Install https://aka.ms/xamarin-android-commercial-d16-2-windows '
        inputs:
          uri: 'https://aka.ms/xamarin-android-commercial-d16-2-windows '
        enabled: false

      - script: ' C:\"Program Files (x86)"\Android\android-sdk\tools\bin\sdkmanager "ndk-bundle"'
        displayName: 'Install NDK'
        enabled: false

      - task: JavaToolInstaller@0
        displayName: 'Install Java 17'
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        inputs:
          versionSpec: 6.x

      - task: NuGetCommand@2
        displayName: 'Install Nuget Packages for solution'
        inputs:
          restoreSolution: '$(solution)'

      - task: XamarinAndroid@1
        displayName: 'Build Android Project'
        inputs:
          projectFile: Src/MoneyFox.Android/MoneyFox.Android.csproj
          outputDirectory: '$(build.binariesdirectory)/$(BuildConfiguration)'
          configuration: '$(BuildConfiguration)'
          msbuildVersionOption: latest
          msbuildArchitectureOption: x64
          msbuildArguments: '/p:JavaSdkDirectory="$(JAVA_HOME)/"'


  - job: BuildAndTestWinUI
    displayName: "Build WinUI and Run Tests"
    pool:
      vmImage: windows-2022
    
    variables:
      solution: '**/*.wapproj'
      appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
    
    steps:
      - task: DownloadSecureFile@1
        displayName: 'Download Windows Certificate'
        name: 'signingCert'
        inputs:
          secureFile: 'MoneyFoxCert_2021.pfx'

      - powershell: |
          $pfxpath = '$(signingCert.secureFilePath)'
          $certPassword = $env:CERT_PASSWORD_ENV
          
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $certPassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
          $store.Add($cert)
          $store.Close()
        displayName: 'Install Cert'
        env:
          CERT_PASSWORD_ENV: $(UWP_Certificate_Password)

      - task: PowerShell@2
        displayName: "Set AppManifest"
        inputs:
          targetType: 'inline'
          script: |
            [xml]$xmlDoc = Get-Content '$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.appxmanifest'
            $xmlDoc.Package.Identity.Name="57598ApplySolutionsSoftwa.MoneyFox"
            $xmlDoc.Package.Identity.Publisher="CN=071307B1-B0E3-434A-AD0E-FFF714A7245C"
            $xmlDoc.Save('$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.appxmanifest')
          failOnStderr: true

      - task: PowerShell@2
        displayName: "Set Store Association"
        inputs:
          targetType: 'inline'
          script: |
            [xml]$xmlDoc = Get-Content '$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.StoreAssociation.xml'
            $xmlDoc.StoreAssociation.Publisher="CN=071307B1-B0E3-434A-AD0E-FFF714A7245C"
            $xmlDoc.StoreAssociation.ProductReservedInfo.MainPackageIdentityName="57598ApplySolutionsSoftwa.MoneyFox"
            $xmlDoc.Save('$(Build.SourcesDirectory)\src\MoneyFox.Win\MoneyFox.Win (Package)\Package.StoreAssociation.xml')
          failOnStderr: true

      - task: UseDotNet@2
        displayName: Use .NET 6.0
        enabled: false
        inputs:
          packageType: 'sdk'
          version: '6.0.x'

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        inputs:
          versionSpec: 6.x

      - task: DotNetCoreCLI@2
        displayName: Restore NuGets
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: 'Run Tests'
        inputs:
          command: 'test'
          projects: |
            **/*.Tests.csproj
          arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'

      - task: VSBuild@1
        displayName: 'Build WinUI Project'
        inputs:
          solution: '$(solution)'
          msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|arm64" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=CI'
          platform: x64
          configuration: '$(BuildConfiguration)'


  - job: RunMutationTests
    displayName: "Run Mutation Tests"
    pool:
      vmImage: windows-2022
    
    steps:

      - task: DotNetCoreCLI@2
        displayName: 'Install dotnet-stryker'
        inputs:
          command: custom
          custom: tool
          arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools

      - task: Powershell@2
        displayName: 'Run dotnet-stryker'
        inputs:
          workingDirectory: '$(Build.Repository.LocalPath)\src\MoneyFox.Core.Tests'
          targetType: 'inline'
          pwsh: true
          script: $(Agent.BuildDirectory)/tools/dotnet-stryker --dashboard-api-key $(StrykerDashboardApiKey) --version $(System.PullRequest.SourceBranch)

      - task: PublishMutationReport@1
        inputs:
          reportPattern: '**/mutation-report.html'